[CmdletBinding()]
param(
    [string]$ConfigFile = ".\servers.json",
    [string]$HtmlOut = ".\Output\Report.html",
    [string]$CsvOut  = ".\Output\Report.csv",
    [string]$LogFile = ".\Output\ServerHealth.log"
)

$ErrorActionPreference = "Stop"

function Write-Log {
    param([string]$Message)
    $ts = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    "$ts`t$Message" | Out-File -FilePath $LogFile -Append -Encoding utf8
}

try {
    if (-not (Test-Path $ConfigFile)) { throw "Config file not found: $ConfigFile" }

    $cfg      = Get-Content $ConfigFile -Raw | ConvertFrom-Json
    $servers  = $cfg.Servers
    $services = $cfg.ServicesToCheck
    $title    = $cfg.ReportTitle

    $outDir = Split-Path $HtmlOut
    if (-not (Test-Path $outDir)) { New-Item $outDir -ItemType Directory | Out-Null }

    Write-Verbose "Collecting data for: $($servers -join ', ')" -Verbose
    Write-Log "Collecting data for: $($servers -join ', ')"

    $results = foreach ($s in $servers) {
        try {
            $os = Get-CimInstance Win32_OperatingSystem -ComputerName $s
            $uptimeDays = [int]((Get-Date) - $os.LastBootUpTime).TotalDays

            $disks = Get-CimInstance Win32_LogicalDisk -ComputerName $s -Filter "DriveType=3" |
                     Select-Object DeviceID,
                       @{n='FreeGB';e={[math]::Round($_.FreeSpace/1GB,2)}},
                       @{n='TotalGB';e={[math]::Round($_.Size/1GB,2)}}

            $svc = foreach ($name in $services) {
                $o = Get-Service -ComputerName $s -Name $name -ErrorAction SilentlyContinue
                [pscustomobject]@{ Service=$name; Status = $(if($o){$o.Status}else{"NotFound"}) }
            }

            [pscustomobject]@{
                Server     = $s
                OS         = $os.Caption
                UptimeDays = $uptimeDays
                DisksJson  = ($disks | ConvertTo-Json -Depth 3)
                SvcsJson   = ($svc   | ConvertTo-Json -Depth 3)
                Collected  = Get-Date
            }
        } catch {
            Write-Log "Failed on $s: $($_.Exception.Message)"
            [pscustomobject]@{ Server=$s; OS="Error"; UptimeDays=0; DisksJson="[]"; SvcsJson="[]"; Collected=Get-Date }
        }
    }

    $results | Select Server,OS,UptimeDays,Collected,DisksJson,SvcsJson |
      Export-Csv -NoTypeInformation -Path $CsvOut

    $html = $results | Select Server,OS,UptimeDays,Collected |
      ConvertTo-Html -Title $title -PreContent "<h1>$title</h1><p>Generated: $(Get-Date)</p>"
    $html | Out-File $HtmlOut -Encoding utf8

    Write-Log "Done: HTML=$HtmlOut CSV=$CsvOut"
    "HTML: $HtmlOut`nCSV : $CsvOut"
}
catch {
    Write-Log "Fatal: $($_.Exception.Message)"
    throw
}
